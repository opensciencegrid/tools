#!/usr/bin/python

"""
Usage:
  For goc packages:
      %s goc      [3.3|3.4|3.5] [el6|el7] [development|testing|release] [itb|production]
  For osg epel packages:
      %s osg-epel [3.4|3.5]     [el6|el7] [development|testing|release]
    Or:
      %s osg-epel [devops]      [el7]     [itb|production]
  For osg i2 packages:
      %s osg-i2   [3.3|3.4|3.5] [el6|el7] [development|testing|release]

Default for goc:
  %s el%s %s %s
Default for osg-epel:
  %s el%s %s
Default for osg-i2:
  %s el%s %s

Options:
  --make-cache     save (goc-elX-YY.html, osg-3.X-elX-ZZ.list) | ( (epelX.html | i2_X.html) and osg-3.X-elX-XXX.list) for offline use
  --cached         used cached files instead of pulling live versions
  --[no-]color     colorize version differences (default = True if tty)
  --html           generate html output (implies --color)
  --preamble=text  print some preamble text before the report
  --show-all       show versions even for non-outdated packages
"""
import sys
import os
import re
import rpm
import urllib2
try:
    from rpmUtils.miscutils import stringToVersion
except ImportError:
    from miscutils import stringToVersion

MODE     = ''
SERIES   = '3.5'
EL       = '7' # default for i2 is 6
TAG      = 'release'
OSG_REPO = 'release'
GOC_REPO = 'production'

use_cached = False
make_cache = False
use_color  = sys.stdout.isatty()
show_all   = False
html_out   = False
preamble   = None


def usage(func):
    # check which funcion user used, print different values
    script = os.path.basename(__file__)
    print __doc__ % (script, script, script, script,
                    SERIES, EL, OSG_REPO, GOC_REPO,
                    SERIES, EL, TAG,
                    SERIES, EL, TAG)
    sys.exit()

# Mode selection
if sys.argv[1] in ['goc', 'osg-epel', 'osg-i2']:
    MODE = sys.argv[1]
else:
    usage()

# Insert code below to change any default values
if MODE == 'osg-i2':
    # Since default EL is 6 for i2 pkgs
    EL = '6'

for arg in sys.argv[2:]:
    if MODE == 'goc':
        if re.search(r'^el[5-9]$', arg):
            EL = arg[2]
        elif re.search(r'^[3-9]\.[0-9]$', arg):
            SERIES = arg
        elif re.search(r'^(upcoming-)?(development|testing|release)$', arg):
            OSG_REPO = arg
        elif arg in ('itb', 'production'):
            GOC_REPO = arg
        elif arg == '--cached':
            use_cached = True
        elif arg == '--make-cache':
            make_cache = True
        elif arg == '--color':
            use_color = True
        elif arg == '--no-color':
            use_color = False
        elif arg == '--html':
            html_out = True
            use_color = True
        elif arg.startswith('--preamble='):
            preamble = arg[len('--preamble='):]
        elif arg == '--show-all':
            show_all = True
        else:
            usage()
    elif MODE == 'osg-epel':
        if re.search(r'^el[5-9]$', arg):
            EL = arg[2]
        elif re.search(r'^[3-9]\.[0-9]$', arg) or arg == 'devops':
            SERIES = arg
        elif re.search(r'^(upcoming-)?(development|testing|release)$', arg) \
            or arg in ('itb', 'production'):
            TAG = arg
        elif arg == '--cached':
            use_cached = True
        elif arg == '--make-cache':
            make_cache = True
        elif arg == '--color':
            use_color = True
        elif arg == '--no-color':
            use_color = False
        elif arg == '--html':
            html_out = True
            use_color = True
        elif arg.startswith('--preamble='):
            preamble = arg[len('--preamble='):]
        elif arg == '--show-all':
            show_all = True
        else:
            usage()
    elif MODE == 'osg-i2':
        if re.search(r'^el[5-9]$', arg):
            EL = arg[2]
        elif re.search(r'^[3-9]\.[0-9]$', arg):
            SERIES = arg
        elif re.search(r'^(upcoming-)?(development|testing|release)$', arg):
            TAG = arg
        elif arg == '--cached':
            use_cached = True
        elif arg == '--make-cache':
            make_cache = True
        elif arg == '--color':
            use_color = True
        elif arg == '--no-color':
            use_color = False
        elif arg == '--html':
            html_out = True
            use_color = True
        elif arg.startswith('--preamble='):
            preamble = arg[len('--preamble='):]
        elif arg == '--show-all':
            show_all = True
        else:
            usage()

if use_cached and make_cache:
    usage()

if MODE == 'osg-epel':
    if SERIES == 'devops' and TAG == 'release':
        TAG = 'production'

def strip_dist_tag(seq, dist_pfx):
    pat = r'\.%s[^-]*$' % dist_pfx
    return [ re.sub(pat, '', nvr) for nvr in seq ]

def extract_href_rpm(line):
    m = re.search(r'<a href="([^"]+(-[^-"]+){2})\.src\.rpm"', line)
    if m:
        return m.groups()[0]
    m = re.search(r'<a href="(\w)/"', line)
    if m:
        if MODE == 'osg-epel':
            return get_epel_list(m.groups()[0])
        else:
            return get_i2_list(m.groups()[0])

def get_handle(fn, arg, cache_name):
    if use_cached:
        handle = open(cache_name)
    else:
        handle = fn(arg)
        if make_cache:
            open(cache_name, 'w').write(handle.read())
            print "Wrote:", cache_name
            handle = []

    return handle

def get_koji_list(koji_tag):
    cmd = "osg-koji list-tagged --latest --rpms %s" % koji_tag
    cache_name = koji_tag + '.list'

    handle = get_handle(os.popen, cmd, cache_name)

    nvrs = [ line[:-5] for line in handle if line.endswith(".src\n") ]
    return strip_dist_tag(nvrs, 'osg')

def get_epel_list(subdir=None):
    epel_url = "http://dl.fedoraproject.org/pub/epel/%s/SRPMS/Packages/" % EL
    if subdir is None:
        cache_name = 'epel%s.html' % EL
    else:
        cache_name = 'epel%s_%s.html' % (EL,subdir)
        epel_url += "%s/" % subdir

    handle = get_handle(urllib2.urlopen, epel_url, cache_name)

    nvrs = filter(None, map(extract_href_rpm, handle))
    if nvrs and type(nvrs[0]) is list:
        nvrs = [ nvr for nvrlist in nvrs for nvr in nvrlist ]
    return strip_dist_tag(nvrs, 'el%s' % EL)

def get_i2_list(subdir=None):
    i2_url = "http://software.internet2.edu/rpms/el%s/SRPMS/" % EL
    cache_name = 'i2_%s.html' % EL

    handle = get_handle(urllib2.urlopen, i2_url, cache_name)

    nvrs = filter(None, map(extract_href_rpm, handle))
    return strip_dist_tag(nvrs, 'el%s' % EL)

def get_osg_list():
    if SERIES == 'devops':
        osg_tag = "%s-el%s-%s" % (SERIES, EL, TAG)
    else:
        osg_tag = "osg-%s-el%s-%s" % (SERIES, EL, TAG)
    cmd = "osg-koji list-tagged --latest --rpms %s" % osg_tag
    cache_name = osg_tag + '.list'

    handle = get_handle(os.popen, cmd, cache_name)

    nvrs = [ line[:-5] for line in handle if line.endswith(".src\n") ]
    return strip_dist_tag(nvrs, 'osg')

def rpmvercmp(a,b):
    return rpm.labelCompare(*[stringToVersion(x) for x in (a,b)])

def n_vr(nvr):
    n,v,r = nvr.rsplit("-",2)
    return n, v+'-'+r

def nvrmap(seq):
    return dict( n_vr(nvr) for nvr in seq )

if make_cache:
    if MODE != 'goc':
        # osg scripts both call this function
        get_osg_list()
    if MODE == 'osg-epel':
        get_epel_list()
    if MODE == 'osg-i2':
        get_i2_list()
    sys.exit()

def colorize(color, *seq):
    return [ "\x1b[%sm%s\x1b[0m" % (color, x) for x in seq ]

def colorize_vr(vr1, vr2):
    v1,r1 = vr1.split('-')
    v2,r2 = vr2.split('-')

    if v1 != v2:
        v1,v2 = colorize('1;32', v1, v2)
    elif r1 != r2:
        r1,r2 = colorize('1;34', r1, r2)

    return map('-'.join, [[v1,r1],[v2,r2]])

def colorize_html(color, *seq):
    return [ '<span class="%s">%s</span>' % (color, x) for x in seq ]

def colorize_html_vr(vr1, vr2):
    v1,r1 = vr1.split('-')
    v2,r2 = vr2.split('-')

    if v1 != v2:
        v1,v2 = colorize_html('vdiff', v1, v2)
    elif r1 != r2:
        r1,r2 = colorize_html('rdiff', r1, r2)

    return map('-'.join, [[v1,r1],[v2,r2]])

if html_out:
    colorize_vr = colorize_html_vr
    print ("<html>\n<head>\n<style type='text/css'>\n.vdiff {color:green}\n"
           ".rdiff {color:blue}\n</style>\n</head>\n<body>\n<pre>")

if preamble:
    print preamble
    print

pkg_diffs = []

if MODE == 'goc':
    goc_tag = "goc-el%s-%s" % (EL, GOC_REPO)
    osg_tag = "osg-%s-el%s-%s" % (SERIES, EL, OSG_REPO)

    goc_map = nvrmap(get_koji_list(goc_tag))
    osg_map = nvrmap(get_koji_list(osg_tag))

    for pkg in sorted(goc_map):
        if pkg in osg_map:
            vrcmp = rpmvercmp(goc_map[pkg], osg_map[pkg])
            if vrcmp < 0 or show_all:
                pkg_diffs.append([pkg, goc_map[pkg], osg_map[pkg]])

    if pkg_diffs:
        pkg_diffs[:0] = [["Package", "EL%s GOC" % EL, "OSG " + SERIES]]
        widths = [ max(map(len,col)) for col in zip(*pkg_diffs) ]
        pkg_diffs[1:1] = [[ '-' * n for n in widths ]]
        for i,row in enumerate(pkg_diffs):
            spacing = [ w-len(x) for x,w in zip(row,widths) ]
            if use_color and i > 1:
                row[1:] = colorize_vr(*row[1:])
            print '  '.join( r + ' ' * s for r,s in zip(row,spacing) ).rstrip()
    else:
        print "No package version differences"
elif MODE == 'osg-epel':
    epel_map = nvrmap(get_epel_list())
    osg_map  = nvrmap(get_osg_list())
    for pkg in sorted(osg_map):
        if pkg in epel_map:
            vrcmp = rpmvercmp(osg_map[pkg], epel_map[pkg])
            if vrcmp < 0 or show_all:
                pkg_diffs.append([pkg, osg_map[pkg], epel_map[pkg]])

    if pkg_diffs:
        pkg_diffs[:0] = [["Package", "OSG " + SERIES, "EPEL " + EL]]
        widths = [ max(map(len,col)) for col in zip(*pkg_diffs) ]
        pkg_diffs[1:1] = [[ '-' * n for n in widths ]]
        for i,row in enumerate(pkg_diffs):
            spacing = [ w-len(x) for x,w in zip(row,widths) ]
            if use_color and i > 1:
                row[1:] = colorize_vr(*row[1:])
            print '  '.join( r + ' ' * s for r,s in zip(row,spacing) ).rstrip()
    else:
        print "No package version differences"
elif MODE == 'osg-i2':
    i2_map = nvrmap(get_i2_list())
    osg_map  = nvrmap(get_osg_list())

    for pkg in sorted(osg_map):
        if pkg in i2_map:
            vrcmp = rpmvercmp(osg_map[pkg], i2_map[pkg])
            if vrcmp < 0 or show_all:
                pkg_diffs.append([pkg, osg_map[pkg], i2_map[pkg]])

    if pkg_diffs:
        pkg_diffs[:0] = [["Package", "OSG " + SERIES, "I2 EL" + EL]]
        widths = [ max(map(len,col)) for col in zip(*pkg_diffs) ]
        pkg_diffs[1:1] = [[ '-' * n for n in widths ]]
        for i,row in enumerate(pkg_diffs):
            spacing = [ w-len(x) for x,w in zip(row,widths) ]
            if use_color and i > 1:
                row[1:] = colorize_vr(*row[1:])
            print '  '.join( r + ' ' * s for r,s in zip(row,spacing) ).rstrip()
    else:
        print "No package version differences"

if html_out:
    print "</pre>\n</body>\n</html>"
